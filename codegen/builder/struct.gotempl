package esq

import "encoding/json"

type {{.Name}}Builder struct {
{{- range .ExtendStruct}}
    {{.}}
{{- end}}
{{- range .Fields}}
    {{.Name}}_ {{if .Flag.IsArr}}[]{{end}}{{if and (not .Flag.IsRequired) (not .Flag.IsArr)}}*{{end}}{{.FieldType}} `json:"{{.JsonTag}}{{if not .Flag.IsRequired}},omitempty{{end}}"`
{{- end}}
}


{{- if .ImplementInterface}}
    {{range .ImplementInterface.Method}}
        func (*{{$.Name}}Builder) {{.}}() {}
    {{end -}}
{{end}}


func {{.Name}} (
{{- range .Fields}}
    {{- if .Flag.IsRequired}}
        {{.ParamName}} {{if .Flag.IsArr}}[]{{end}}{{.FieldType}},
    {{- end}}
{{- end}}
) *{{.Name}}Builder {
return &{{.Name}}Builder {
{{- range .Fields}}
    {{- if .Flag.IsRequired}}
        {{.Name}}_: {{.ParamName}},
    {{- end}}
{{- end}}
}
}

{{range .Fields}}
    func ({{$.ReceiverName}}Builder *{{$.Name}}Builder) {{.Name}}({{.ParamName}} {{if .Flag.IsArr}}...{{end}}{{.FieldType}}) *{{$.Name}}Builder {
    {{$.ReceiverName}}Builder.{{.Name}}_ = {{if and (not .Flag.IsRequired) (not .Flag.IsArr)}}&{{end}}{{.ParamName}}
    return {{$.ReceiverName}}Builder
    }
{{- end}}

func ({{.ReceiverName}}Builder *{{.Name}}Builder) JSON() ([]byte, error) {
    return json.Marshal({{.ReceiverName}}Builder)
}